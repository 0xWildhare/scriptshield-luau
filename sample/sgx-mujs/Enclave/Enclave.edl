/*
 * Copyright (C) 2011-2016 Intel Corporation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of Intel Corporation nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/* Enclave.edl - Top EDL file. */

enclave {
    
    include "user_types.h" /* buffer_t */
 

    trusted {
        public void test_printf();
        public void test_scanf();
	public void test_fwrite();
	public void test_fread();
	public void test_time();
	public void run_mujs(int argc, [user_check] char** argv);
	public void childfunc();
    };

    untrusted {
	void ocall_print_long(long l);
	void ocall_print_time(long n, long l);
	void ocall_print_timeend(long n, long l);
	void ocall_print_timeres(long n, long l, long s);
	void ocall_print_string([in,string]const char* str);
	long ocall_writev(long fd, long bufs, long len);
	long ocall_write(long fd, long bufs, long len);
	long ocall_syscall0(long n);
	long ocall_syscall1(long n, long a1);
	long ocall_syscall2(long n, long a1, long a2);
	long ocall_syscall3(long n, long a1, long a2, long a3);
	long ocall_syscall4(long n, long a1, long a2, long a3, long a4);
	long ocall_syscall5(long n, long a1, long a2, long a3, long a4, long a5);
	long ocall_syscall6(long n, long a1, long a2, long a3, long a4, long a5, long a6);
	void* ocall_malloc(int len);
	void ocall_free([in, string]unsigned char *str);
	long clone_ocall();
	long ocall_syscallclone(long a1, long a2, long a3, long a4);
    
        };
};
